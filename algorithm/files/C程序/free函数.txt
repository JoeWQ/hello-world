malloc 是一个堆分配，指针是存在栈里面的，只是一个指向堆的指针，里面存着申请空间的头地址。它的大小不受你装在里面的字符串多少的控制。
我说的再清楚一点，举个例如：
     char *p = (char *)malloc(10); 
*p存储在栈里面开辟一个空间，空间的大小是四个字节（他跟前面的类型没有关系，跟编译器能识别的内存空间大小有关系）；(char *)malloc(10)这句话是在堆里面分配了10个字符的空间(只能储存9个字符,和一个结束标志符"\0");这两个存储的地方压根不一样。
  这个语句连起来就是栈里面的*p存了一个在堆上10个字符的空间的地址；其实你改变不改变赋值的字符串大小没有多大关系，他都占用10个字符。无非是少了空出来了，多了只能存9个字符而已。没有本质的区别。
然后来说free,有两个步骤
  1、先释放堆中申请的空间；
  2、清除*p（栈中*p所存储的是，在堆空间开辟空间的首地址）中贮存的值；
   这些都很多年前学习的，不知道对不对，如果有什么异议。可以讨论讨论。在提醒一句，学C/C++语言，不能不知道内存分配。 