#include "stdafx.h"

#include <iostream>
#include "btree.h"
using namespace std;

// 结点的数据类型
typedef char ElementType;

// 回调函数：Visit() = PrintElement()
static void PrintElement(const ElementType &data)
{
    cout << data;
}

int main( int argc, char *argv[], char *envp[] )
{
    CBTNode<ElementType> *pRoot;
    CBTNode<ElementType> *pLeftChild;
    CBTNode<ElementType> *pRightChild;
    CBTree<ElementType> btree;

#ifdef _DEBUG
    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
#endif

    pRoot = new CBTNode<ElementType>;
    if (NULL == pRoot)
        return EXIT_FAILURE;

    pLeftChild = new CBTNode<ElementType>;
    if (NULL == pLeftChild)
        return EXIT_FAILURE;

    pRightChild = new CBTNode<ElementType>;
    if (NULL == pRightChild)
        return EXIT_FAILURE;

    // 创建父亲结点
    pRoot->data = '+';
    pRoot->parent = NULL;
    pRoot->left = pLeftChild;
    pRoot->right = pRightChild;

    // 创建左儿子结点
    pLeftChild->data = 'a';
    pLeftChild->parent = pRoot;
    pLeftChild->left = NULL;
    pLeftChild->right = NULL;

    // 创建右儿子结点
    pRightChild->data = 'b';
    pRightChild->parent = pRoot;
    pRightChild->left = NULL;
    pRightChild->right = NULL;

    // 创建二叉树
    btree.AssignTo(pRoot);

    // 输出这棵二叉树
    cout << "   (" << btree.GetNodeData(btree.GetRoot()) << ")  " << endl;
    cout << "  /   \\ " << endl;
    cout << "(" << btree.GetNodeData(btree.GetLeftChild(btree.GetRoot()))
         << ")    (" << btree.GetNodeData(btree.GetRightChild(btree.GetRoot()))
         << ")" << endl << endl;

    cout << "这棵树的叶子数：" << btree.GetLeafCount() << endl;

    cout << "这棵树的深度是：" << btree.GetDepth() << endl;

    cout << "先序遍历：";
    btree.PreOrderTraverse(PrintElement);

    cout << endl << "中序遍历：";
    btree.InOrderTraverse(PrintElement);

    cout << endl << "后序遍历：";
    btree.PostOrderTraverse(PrintElement);

    cout << endl;

    
    CBTree<ElementType> btree2;
    btree2.Copy(btree);

    return EXIT_SUCCESS;
}

/******************************************/

#ifndef __BINARY_TREE_H__
#define __BINARY_TREE_H__

#include <assert.h>
#include <crtdbg.h>

#ifdef _DEBUG
#define DEBUG_NEW new (_NORMAL_BLOCK, THIS_FILE, __LINE__)
#endif

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#ifdef _DEBUG
#ifndef ASSERT
#define ASSERT  assert
#endif
#else   // not _DEBUG
#ifndef ASSERT
#define ASSERT
#endif
#endif  // _DEBUG

template<typename T>
class CBTNode
{
public:
    T data;
    CBTNode<T> *parent;
    CBTNode<T> *left;
    CBTNode<T> *right;
    CBTNode(
        T data = T(),
        CBTNode<T> *parent = NULL,
        CBTNode<T> *left = NULL,
        CBTNode<T> *right = NULL
    ) : data(data), parent(parent), left(left), right(right) {}
};

template<typename T>
class CBTree
{
protected:
    CBTNode<T> *m_pNodeRoot;

public:
    CBTree(CBTNode<T> *initroot = NULL);
    ~CBTree();
    void AssignTo(CBTNode<T> *p);
    void Copy(CBTree<T> &p);

private:
    CBTNode<T>* Copy(CBTNode<T> *p, CBTNode<T> *parent);

    void DestroyNode(CBTNode<T> *p);

    void PreOrderTraverse(
        const CBTNode<T> *p,
        void (*Visit)(const T &data)
    ) const;

    void InOrderTraverse(
        const CBTNode<T> *p,
        void (*Visit)(const T &data)
    ) const;

    void PostOrderTraverse(
        const CBTNode<T> *p,
        void (*Visit)(const T &data)
    ) const;

    void GetNodesCount(const CBTNode<T> *p, unsigned int *unCount) const;

    void GetLeafCount(const CBTNode<T> *p, unsigned int *unCount) const;

    unsigned int    GetDepth(const CBTNode<T> *p) const;

public:
    T&              GetNodeData(CBTNode<T> *p);
    T               GetNodeData(const CBTNode<T> *p) const;
    void            SetNodeData(CBTNode<T> *p, const T &data);
    CBTNode<T>*&    GetRoot();
    CBTNode<T>*     GetRoot() const;
    CBTNode<T>*&    GetParent(CBTNode<T> *p);
    CBTNode<T>*     GetParent(const CBTNode<T> *p) const;
    CBTNode<T>*&    GetLeftChild(CBTNode<T> *p);
    CBTNode<T>*     GetLeftChild(const CBTNode<T> *p) const;
    CBTNode<T>*&    GetRightChild(CBTNode<T> *p);
    CBTNode<T>*     GetRightChild(const CBTNode<T> *p) const;
    CBTNode<T>*&    GetLeftSibling(CBTNode<T> *p);
    CBTNode<T>*     GetLeftSiblig(const CBTNode<T> *p) const;
    CBTNode<T>*&    GetRightSibling(CBTNode<T> *p);
    CBTNode<T>*     GetRightSibling(const CBTNode<T> *p) const;

public:
    int             IsEmpty() const;
    void            Destroy();
    void            PreOrderTraverse(void (*Visit)(const T &data)) const;
    void            InOrderTraverse(void (*Visit)(const T &data)) const;
    void            PostOrderTraverse(void (*Visit)(const T &data)) const;
    unsigned int    GetNodesCount() const; // Get how many nodes
    unsigned int    GetLeafCount() const;
    unsigned int    GetDepth() const;
};

template<typename T>
inline CBTree<T>::CBTree(CBTNode<T> *initroot) : m_pNodeRoot(initroot)
{
}

template<typename T>
inline CBTree<T>::~CBTree()
{
    Destroy();
}

template<typename T>
inline void CBTree<T>::AssignTo(CBTNode<T> *p)
{
    ASSERT(p);
    m_pNodeRoot = p;
}

template<typename T>
inline void CBTree<T>::Copy(CBTree<T> &p)
{
    if (NULL != p.m_pNodeRoot)
        m_pNodeRoot = Copy(p.m_pNodeRoot, NULL);
    else
        m_pNodeRoot = NULL;
}

template<typename T>
inline CBTNode<T>* CBTree<T>::Copy(CBTNode<T> *p, CBTNode<T> *parent)
{
    CBTNode<T> *pNewNode;

    if (p)
    {
        pNewNode = new CBTNode<T>;
        if (NULL == pNewNode)
            return NULL;
        pNewNode->data = p->data;
        pNewNode->parent = parent;
        pNewNode->left = Copy(p->left, pNewNode);
        pNewNode->right = Copy(p->right, pNewNode);
        return pNewNode;
    }
    else
        return NULL;
}

template<typename T>
inline CBTNode<T>*& CBTree<T>::GetLeftChild(CBTNode<T> *p)
{
    ASSERT(p);
    return p->left;
}

template<typename T>
inline CBTNode<T>* CBTree<T>::GetLeftChild(const CBTNode<T> *p) const
{
    ASSERT(p);
    return p->left;
}

template<typename T>
inline CBTNode<T>*& CBTree<T>::GetRightChild(CBTNode<T> *p)
{
    ASSERT(p);
    return p->right;
}

template<typename T>
inline CBTNode<T>* CBTree<T>::GetRightChild(const CBTNode<T> *p) const
{
    ASSERT(p);
    return p->right;
}

template<typename T>
inline CBTNode<T>*& CBTree<T>::GetLeftSibling(CBTNode<T> *p)
{
    ASSERT(p);

    if (p->parent)
        return p->parent->left;
    else
        return NULL;
}

template<typename T>
inline CBTNode<T>* CBTree<T>::GetLeftSiblig(const CBTNode<T> *p) const
{
    ASSERT(p);

    if (p->parent)
        return p->parent->left;
    else
        return NULL;
}

template<typename T>
inline CBTNode<T>*& CBTree<T>::GetRightSibling(CBTNode<T> *p)
{
    ASSERT(p);

    if (p->parent)
        return p->parent->right;
    else
        return NULL;
}

template<typename T>
inline CBTNode<T>* CBTree<T>::GetRightSibling(const CBTNode<T> *p) const
{
    ASSERT(p);

    if (p->parent)
        return p->parent->right;
    else
        return NULL;
}

template<typename T>
inline CBTNode<T>*& CBTree<T>::GetParent(CBTNode<T> *p)
{
    ASSERT(p);
    return p->parent;
}

template<typename T>
inline CBTNode<T>* CBTree<T>::GetParent(const CBTNode<T> *p) const
{
    ASSERT(p);
    return p->parent;
}

template<typename T>
inline T& CBTree<T>::GetNodeData(CBTNode<T> *p)
{
    ASSERT(p);
    return p->data;
}

template<typename T>
inline T CBTree<T>::GetNodeData(const CBTNode<T> *p) const
{
    ASSERT(p);
    return p->data;
}

template<typename T>
inline void CBTree<T>::SetNodeData(CBTNode<T> *p, const T &data)
{
    ASSERT(p);
    p->data = data;
}

template<typename T>
inline int CBTree<T>::IsEmpty() const
{
    return NULL == m_pNodeRoot;
}

template<typename T>
inline CBTNode<T>*& CBTree<T>::GetRoot()
{
    return m_pNodeRoot;
}

template<typename T>
inline CBTNode<T>* CBTree<T>::GetRoot() const
{
    return m_pNodeRoot;
}

template<typename T>
inline void CBTree<T>::DestroyNode(CBTNode<T> *p)
{
    if (p)
    {
        DestroyNode(p->left);
        DestroyNode(p->right);
        delete p;
    }
}

template<typename T>
inline void CBTree<T>::Destroy()
{
    DestroyNode(m_pNodeRoot);
    m_pNodeRoot = NULL;
}

// 先序遍历
template<typename T>
inline void CBTree<T>::PreOrderTraverse(void (*Visit)(const T &data)) const
{
    PreOrderTraverse(m_pNodeRoot, Visit);
}

template<typename T>
inline void CBTree<T>::PreOrderTraverse(
    const CBTNode<T> *p,
    void (*Visit)(const T &data)
) const
{
    if (p)
    {
        Visit(p->data);
        PreOrderTraverse(p->left, Visit);
        PreOrderTraverse(p->right, Visit);
    }
}

// 中序遍历
template<typename T>
inline void CBTree<T>::InOrderTraverse(void (*Visit)(const T &data)) const
{
    InOrderTraverse(m_pNodeRoot, Visit);
}

template<typename T>
inline void CBTree<T>::InOrderTraverse(
    const CBTNode<T> *p,
    void (*Visit)(const T &data)
) const
{
    if (p)
    {
        InOrderTraverse(p->left, Visit);
        Visit(p->data);
        InOrderTraverse(p->right, Visit);
    }
}

// 后序遍历
template<typename T>
inline void CBTree<T>::PostOrderTraverse(void (*Visit)(const T &data)) const
{
    PostOrderTraverse(m_pNodeRoot, Visit);
}

template<typename T>
inline void CBTree<T>::PostOrderTraverse(
    const CBTNode<T> *p,
    void (*Visit)(const T &data)
) const
{
    if (p)
    {
        PostOrderTraverse(p->left, Visit);
        PostOrderTraverse(p->right, Visit);
        Visit(p->data);
    }
}

template<typename T>
inline unsigned int CBTree<T>::GetNodesCount() const
{
    unsigned int unCount;
    GetNodesCount(m_pNodeRoot, &unCount);
    return unCount;
}

template<typename T>
inline void CBTree<T>::GetNodesCount(
    const CBTNode<T> *p,
    unsigned int *unCount
) const
{
    ASSERT(unCount);

    unsigned int unLeftCount;
    unsigned int unRightCount;

    if (NULL == p)
        *unCount = 0;
    else if ((NULL == p->left) && (NULL == p->right))
        *unCount = 1;
    else
    {
        GetNodesCount(p->left, &unLeftCount);
        GetNodesCount(p->right, &unRightCount);
        *unCount = 1 + unLeftCount + unRightCount;
    }
}

template<typename T>
inline unsigned int CBTree<T>::GetLeafCount() const
{
    unsigned int unCount = 0;
    GetLeafCount(m_pNodeRoot, &unCount);
    return unCount;
}

template<typename T>
inline void CBTree<T>::GetLeafCount(
    const CBTNode<T> *p,
    unsigned int *unCount
) const
{
    ASSERT(unCount);

    if (p)
    {
        // if the node's left & right children are both NULL, it must be a leaf
        if ((NULL == p->left) && (NULL == p->right))
            ++(*unCount);
        GetLeafCount(p->left, unCount);
        GetLeafCount(p->right, unCount);
    }
}

template<typename T>
inline unsigned int CBTree<T>::GetDepth() const
{
    // root深度为0
    return GetDepth(m_pNodeRoot) - 1;
}

template<typename T>
inline unsigned int CBTree<T>::GetDepth(const CBTNode<T> *p) const
{
    unsigned int unDepthLeft;
    unsigned int unDepthRight;

    if (p)
    {
        unDepthLeft = GetDepth(p->left);
        unDepthRight = GetDepth(p->right);
        return 1 + (unDepthLeft > unDepthRight ? unDepthLeft : unDepthRight);
    }
    else
        return 0;
}

#endif  // __BINARY_TREE_H__ 
 
冰盾DDoS防火墙: 专业防护SYNFlood和CC等DDoS攻击，免费试用，满意购买！ 
 回复 引用 报告 使用道具 举报该贴  TOP 